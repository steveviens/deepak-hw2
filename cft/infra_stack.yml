AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates AWS Resource Stack for Homework #2"

Parameters:

  DomainName:
    Type: String
    Description: User-defined OpenSearch domain name
    Default: hw2-opensearch-domain

  InstanceType:
    Type: String
    Default: t2.small.search

  AvailabilityZone:
    Type: String
    Default: us-east-1a

  CidrBlock:
    Type: String
    Default: 10.0.0.0/24

Resources:

  OpenSearchServiceDomain:
    Type: 'AWS::OpenSearchService::Domain'
    Properties:
      DomainName:
        Ref: DomainName
      EngineVersion: OpenSearch_1.0
      ClusterConfig:
        InstanceCount: '1'
        InstanceType:
          Ref: InstanceType
      EBSOptions:
        EBSEnabled: true
        Iops: '0'
        VolumeSize: '10'
        VolumeType: 'gp2'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: '*'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
        override_main_response_version: true
      Tags:
        - Key: project
          Value: hw2
      VPCOptions:
        SubnetIds:
          - Ref: Subnet
        SecurityGroupIds:
          - Ref: SecurityGroup

  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: hw2-vpc
        - Key: project
          Value: hw2

  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: CidrBlock
      AvailabilityZone:
        Ref: AvailabilityZone
      Tags:
        - Key: Name
          Value: hw2-subnet
        - Key: project
          Value: hw2

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'HW2 Open Search Security Group'
      VpcId:
        Ref: Vpc
      GroupName: hw2-security-group
      SecurityGroupIngress:
        - FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: hw2-security-group
        - Key: project
          Value: hw2

  PhotosBucket:
    Type: AWS::S3::Bucket
    DependsOn: TriggerIndexPhotosLambdaPermission
    Properties:
      BucketName: 'hw2-1323-photos'
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt IndexPhotosLambda.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .jpeg

  TriggerIndexPhotosLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt IndexPhotosLambda.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::hw2-1323-photos'
      SourceAccount: !Ref AWS::AccountId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hw2-lambda-function-execution-role
      Description: Describe this IAM role here
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: hw2-admin-access-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"

  IndexPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Uses AWS Rekognition to scan photos uploaded to S3 bucket
      FunctionName: hw2-index-photos-function
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from hw2-index-photos-function!')
              }
      Handler: index_photos_function.lambda_handler
      MemorySize: 256
      Timeout: 10

  SearchPhotosLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Search for photos in Open Search domain
      FunctionName: hw2-search-photos-function
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from hw2-search-photos-function!')
              }
      Handler: search_photos_function.lambda_handler
      MemorySize: 256
      Timeout: 10

  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: hw2-api-gateway
      Description: An api gateway with S3 service integrations
      ApiKeySourceType: HEADER
      BinaryMediaTypes:
        - '*/*'
      EndpointConfiguration:
        Types:
        - REGIONAL
      Tags:
        - Key: project
          Value: hw2
        - Key: account
          Value: 1323

  RestAPISearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'search'
      RestApiId: !Ref RestAPI

  RestAPISearchGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref RestAPISearchResource
      RestApiId: !Ref RestAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join
              - ''
              - - 'arn:aws:lambda:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':function:hw2-search-photos-function'
        Credentials: !GetAtt RestAPIIamRole.Arn
        IntegrationResponses:
          - SelectionPattern: ''
            StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  RestAPIPhotosResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'photos'
      RestApiId: !Ref RestAPI

  RestAPIFolderResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RestAPIPhotosResource
      PathPart: '{folder}'
      RestApiId: !Ref RestAPI

  RestAPIObjectResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref RestAPIFolderResource
      PathPart: '{object}'
      RestApiId: !Ref RestAPI

  RestAPIPhotosPUTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: PUT
      ResourceId: !Ref RestAPIObjectResource
      RestApiId: !Ref RestAPI
      RequestParameters:
        method.request.path.folder: true
        method.request.path.object: true
      Integration:
        IntegrationHttpMethod: PUT
        Type: AWS
        RequestParameters:
          integration.request.path.bucket: method.request.path.folder
          integration.request.path.key: method.request.path.object
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}'
        ConnectionType: INTERNET
        Credentials: !GetAtt RestAPIIamRole.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        IntegrationResponses:
          - SelectionPattern: ''
            StatusCode: 200
            ContentHandling: CONVERT_TO_TEXT
          - SelectionPattern: 400
            StatusCode: 400
            ContentHandling: CONVERT_TO_TEXT
          - SelectionPattern: 500
            StatusCode: 500
            ContentHandling: CONVERT_TO_TEXT
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500

  RestAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      Description: HW2 API Stage Resource
      DeploymentId: !Ref RestAPIDeployment
      RestApiId: !Ref RestAPI
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO   # VALID VALUES ARE OFF, ERROR and INFO
          DataTraceEnabled: true
          MetricsEnabled: false

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: RestAPIPhotosPUTMethod
    Properties:
      Description: HW2 API Deployment Resource
      RestApiId: !Ref RestAPI

  RestAPIIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hw2-api-gateway-role
      Description: Allows API Gateway to push logs to CloudWatch Logs and put binary objects to an S3 bucket.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: hw2-api-gateway-s3-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: arn:aws:s3:::hw2-1323-photos/*

  RestAPIIamPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: RestAPIIamRole
    Properties:
      PolicyName: hw2-api-gateway_lambda_policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'lambda:InvokeFunction'
            Resource: '*'
      Roles:
        - Ref: RestAPIIamRole

Outputs:
  PhotosBucketARN:
    Description: 'The ARN for the hw2-1323-photos bucket'
    Value: !GetAtt PhotosBucket.Arn
